ls
.Library
install.packages("ape")
install.packages("dplyr")
library("RColorBrewer", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library(ape)
library("ape")
library("RColorBrewer", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("ape")
library("ape", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages(c("boot", "class", "cluster", "codetools", "colorspace", "foreign", "formatR", "lattice", "MASS", "Matrix", "mgcv", "R6", "rpart", "stringi", "stringr", "survival"))
install.packages(c("cluster", "Matrix", "mgcv"))
install.packages(c("cluster", "Matrix", "mgcv"))
install.packages("~/Desktop/ape_5.2.tar.gz", repos = NULL, type = "source")
library("ape", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("RColorBrewer", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
setwd("~/Dropbox/Xf_docs/Y1/Phylogenies/MLST_phylo")
tree <- read.tree("~/Dropbox/Xf_docs/Y1/Phylogenies/MLST_phylo/outtree")
# Plot tree without tip labels
plot.phylo(tree)
tree <- read.tree("~/Dropbox/Xf_docs/Y1/Phylogenies/MLST_phylo/out.tre")
# Plot tree without tip labels
plot.phylo(tree)
tree <- read.tree("~/Dropbox/Xf_docs/Y1/Phylogenies/MLST_phylo/no_xanth.tre")
# Plot tree without tip labels
plot.phylo(tree)
# Plot tree without tip labels
plot.phylo(tree, type="fan")
accession <- read.table("~/Dropbox/Xf_docs/Y1/Phylogenies/MLST_phylo/test.tsv")
accession <- read.table("~/Dropbox/Xf_docs/Y1/Phylogenies/MLST_phylo/test.tsv", na.strings = "")
accession <- read.table("~/Dropbox/Xf_docs/Y1/Phylogenies/MLST_phylo/test.tsv", na.strings = " ")
accession <- read.table("~/Dropbox/Xf_docs/Y1/Phylogenies/MLST_phylo/test.tsv", na.strings = "NA")
accession <- read.table("~/Dropbox/Xf_docs/Y1/Phylogenies/MLST_phylo/test.Csv", na.strings = "NA")
accession <- read.table("~/Dropbox/Xf_docs/Y1/Phylogenies/MLST_phylo/test.cv", na.strings = "NA")
accession <- read.table("~/Dropbox/Xf_docs/Y1/Phylogenies/MLST_phylo/test.csv", na.strings = "NA")
accession <- read.csv("~/Dropbox/Xf_docs/Y1/Phylogenies/MLST_phylo/test.csv", na.strings = "NA")
setwd("~/Dropbox/Xf_docs/Y1/Phylogenies/MLST_phylo")
accession <- data.frame(accession)
accession <- read.csv("~/Dropbox/Xf_docs/Y1/Phylogenies/MLST_phylo/test.csv", na.strings = "NA")
twd("~/Dropbox/Xf_docs/Y1/Phylogenies/MLST_phylo")
setwd("~/Dropbox/Xf_docs/Y1/Phylogenies/MLST_phylo")
tree <- read.tree("~/Dropbox/Xf_docs/Y1/Phylogenies/MLST_phylo/no_xanth.tre")
accession <- read.csv("~/Dropbox/Xf_docs/Y1/Phylogenies/MLST_phylo/test.csv")
accession <- read.csv("~/Dropbox/Xf_docs/Y1/Phylogenies/MLST_phylo/pubmlst_feat.csv")
View(tree)
View(accession)
accession <- read.csv("~/Dropbox/Xf_docs/Y1/Phylogenies/MLST_phylo/pubmlst_feat.csv", na.strings = "NA")
View(accession)
View(accession)
accession <- data.frame(accession)
library("ape", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("RColorBrewer", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("phytools")
install.packages("~/Desktop/phytools_0.6-60.tar.gz", repos = NULL, type = "source")
install.packages("gplots")
library("gplots", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("~/Desktop/phytools_0.6-60.tgz", repos = NULL, type = .Platform$pkgType)
library("phytools", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("~/Desktop/phytools_0.6-60.tgz", repos = NULL, type = .Platform$pkgType)
library("phytools", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("~/Desktop/ggtree_1.14.6.tgz", repos = NULL, type = .Platform$pkgType)
library("ggtree", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("ggplot2")
install.packages("gplots")
install.packages("ape")
install.packages("~/Desktop/ggtree_1.14.6.tgz", repos = NULL, type = .Platform$pkgType)
library("ggtree", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages("dplyr")
library("ggtree", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages("rvcheck")
library("ape", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library("ggtree", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library("gplots", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages("tidyr")
install.packages("shiny")
ibrary(shiny)
install.packages("shiny")
ibrary('/private/var/folders/vt/3n1crd1976d66pk0rpht_wj80000gn/T/RtmpJVeaWb/downloaded_packages/shiny_1.5.0.tar.gz')
library('/private/var/folders/vt/3n1crd1976d66pk0rpht_wj80000gn/T/RtmpJVeaWb/downloaded_packages/shiny_1.5.0.tar.gz')
library(shiny)
install.packages("shiny")
install.packages(c("ape", "assertthat", "BH", "boot", "class", "cli", "cluster", "codetools", "colorspace", "digest", "dplyr", "fansi", "ggplot2", "glue", "gplots", "gtable", "gtools", "htmltools", "httpuv", "jsonlite", "KernSmooth", "later", "lattice", "lazyeval", "MASS", "Matrix", "mgcv", "nlme", "nnet", "pillar", "pkgconfig", "plyr", "promises", "purrr", "R6", "Rcpp", "reshape2", "rlang", "rpart", "rvcheck", "scales", "spatial", "stringi", "survival", "tibble", "tidyr", "tidyselect", "withr"))
install.packages("shiny")
install.packages("shiny")
library(shiny)
devtools::install_github("rstudio/rsconnect")
library(rsconnect)
ui <- fluidPage(
sliderInput(inputId = "num",    # assigns the name "num" to "inputId" argument
label = "Choose a number",    # assigns the description "Choose a number" to label -> description for user
value = 25, min = 1, max = 100),
plotOutput("hist")
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$num))
})
}
shinyApp(ui = ui, server = server)
deployApp()
setwd("~/GDrive_lpmir/PhD/Git_repos/Xf/Effectors/XfShiny")
deployApp()
runApp()
runExample("01_hello")
library(shiny)
library(rsconnect)
setwd("~/GDrive_lpmir/PhD/Git_repos/Xf/Effectors/XfShiny")
deployApp
deployApp()
runApp()
library(rlang)
runApp()
deployApp()
