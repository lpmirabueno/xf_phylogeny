ls
.Library
install.packages("ape")
install.packages("dplyr")
library("RColorBrewer", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library(ape)
library("ape")
library("RColorBrewer", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("ape")
library("ape", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages(c("boot", "class", "cluster", "codetools", "colorspace", "foreign", "formatR", "lattice", "MASS", "Matrix", "mgcv", "R6", "rpart", "stringi", "stringr", "survival"))
install.packages(c("cluster", "Matrix", "mgcv"))
install.packages(c("cluster", "Matrix", "mgcv"))
install.packages("~/Desktop/ape_5.2.tar.gz", repos = NULL, type = "source")
library("ape", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("RColorBrewer", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
setwd("~/Dropbox/Xf_docs/Y1/Phylogenies/MLST_phylo")
tree <- read.tree("~/Dropbox/Xf_docs/Y1/Phylogenies/MLST_phylo/outtree")
# Plot tree without tip labels
plot.phylo(tree)
tree <- read.tree("~/Dropbox/Xf_docs/Y1/Phylogenies/MLST_phylo/out.tre")
# Plot tree without tip labels
plot.phylo(tree)
tree <- read.tree("~/Dropbox/Xf_docs/Y1/Phylogenies/MLST_phylo/no_xanth.tre")
# Plot tree without tip labels
plot.phylo(tree)
# Plot tree without tip labels
plot.phylo(tree, type="fan")
accession <- read.table("~/Dropbox/Xf_docs/Y1/Phylogenies/MLST_phylo/test.tsv")
accession <- read.table("~/Dropbox/Xf_docs/Y1/Phylogenies/MLST_phylo/test.tsv", na.strings = "")
accession <- read.table("~/Dropbox/Xf_docs/Y1/Phylogenies/MLST_phylo/test.tsv", na.strings = " ")
accession <- read.table("~/Dropbox/Xf_docs/Y1/Phylogenies/MLST_phylo/test.tsv", na.strings = "NA")
accession <- read.table("~/Dropbox/Xf_docs/Y1/Phylogenies/MLST_phylo/test.Csv", na.strings = "NA")
accession <- read.table("~/Dropbox/Xf_docs/Y1/Phylogenies/MLST_phylo/test.cv", na.strings = "NA")
accession <- read.table("~/Dropbox/Xf_docs/Y1/Phylogenies/MLST_phylo/test.csv", na.strings = "NA")
accession <- read.csv("~/Dropbox/Xf_docs/Y1/Phylogenies/MLST_phylo/test.csv", na.strings = "NA")
setwd("~/Dropbox/Xf_docs/Y1/Phylogenies/MLST_phylo")
accession <- data.frame(accession)
accession <- read.csv("~/Dropbox/Xf_docs/Y1/Phylogenies/MLST_phylo/test.csv", na.strings = "NA")
twd("~/Dropbox/Xf_docs/Y1/Phylogenies/MLST_phylo")
setwd("~/Dropbox/Xf_docs/Y1/Phylogenies/MLST_phylo")
tree <- read.tree("~/Dropbox/Xf_docs/Y1/Phylogenies/MLST_phylo/no_xanth.tre")
accession <- read.csv("~/Dropbox/Xf_docs/Y1/Phylogenies/MLST_phylo/test.csv")
accession <- read.csv("~/Dropbox/Xf_docs/Y1/Phylogenies/MLST_phylo/pubmlst_feat.csv")
View(tree)
View(accession)
accession <- read.csv("~/Dropbox/Xf_docs/Y1/Phylogenies/MLST_phylo/pubmlst_feat.csv", na.strings = "NA")
View(accession)
View(accession)
accession <- data.frame(accession)
library("ape", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("RColorBrewer", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("phytools")
install.packages("~/Desktop/phytools_0.6-60.tar.gz", repos = NULL, type = "source")
install.packages("gplots")
library("gplots", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("~/Desktop/phytools_0.6-60.tgz", repos = NULL, type = .Platform$pkgType)
library("phytools", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("~/Desktop/phytools_0.6-60.tgz", repos = NULL, type = .Platform$pkgType)
library("phytools", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("~/Desktop/ggtree_1.14.6.tgz", repos = NULL, type = .Platform$pkgType)
library("ggtree", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("ggplot2")
install.packages("gplots")
install.packages("ape")
install.packages("~/Desktop/ggtree_1.14.6.tgz", repos = NULL, type = .Platform$pkgType)
library("ggtree", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages("dplyr")
library("ggtree", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages("rvcheck")
library("ape", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library("ggtree", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library("gplots", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages("tidyr")
install.packages("shiny")
ibrary(shiny)
install.packages("shiny")
ibrary('/private/var/folders/vt/3n1crd1976d66pk0rpht_wj80000gn/T/RtmpJVeaWb/downloaded_packages/shiny_1.5.0.tar.gz')
library('/private/var/folders/vt/3n1crd1976d66pk0rpht_wj80000gn/T/RtmpJVeaWb/downloaded_packages/shiny_1.5.0.tar.gz')
library(shiny)
install.packages("shiny")
install.packages(c("ape", "assertthat", "BH", "boot", "class", "cli", "cluster", "codetools", "colorspace", "digest", "dplyr", "fansi", "ggplot2", "glue", "gplots", "gtable", "gtools", "htmltools", "httpuv", "jsonlite", "KernSmooth", "later", "lattice", "lazyeval", "MASS", "Matrix", "mgcv", "nlme", "nnet", "pillar", "pkgconfig", "plyr", "promises", "purrr", "R6", "Rcpp", "reshape2", "rlang", "rpart", "rvcheck", "scales", "spatial", "stringi", "survival", "tibble", "tidyr", "tidyselect", "withr"))
install.packages("shiny")
library('/private/var/folders/vt/3n1crd1976d66pk0rpht_wj80000gn/T/RtmpJVeaWb/downloaded_packages/shiny_1.5.0.tar.gz')
ui <- fluidPage()
install.packages("shiny")
library(shiny)
ui <- fluidPage()
#install.packages("shiny")
library(shiny)
ui <- fluidPage()
library(shiny)
ui <- fluidPage()
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(Hello World)
ui <- fluidPage(Hello World)
ui <- fluidPage("Hello World")
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
plotOutput("hist")
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$num))
})
}
shinyApp(ui = ui, server = server)
?sliderInput
ui <- fluidPage(
sliderInput(inputId = "num",    # assigns the name "num" to "inputId" argument
label = "Choose a number",    # assigns the description "Choose a number" to label -> description for user
value = 25, min = 1, max = 100),
plotOutput("hist")
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$num))
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
sliderInput(inputId = "num",    # assigns the name "num" to "inputId" argument
label = "Choose a number",    # assigns the description "Choose a number" to label -> description for user
value = 25, min = 1, max = 100),
plotOutput("hist")
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$num))
})
}
shinyApp(ui = ui, server = server)
runApp('GDrive_lpmir/PhD/Git_repos/Xf/Effectors/XfShiny')
install.packages("rsconnect")
# 01-kmeans-app
palette(c("#E41A1C", "#377EB8", "#4DAF4A", "#984EA3",
"#FF7F00", "#FFFF33", "#A65628", "#F781BF", "#999999"))
library(shiny)
ui <- fluidPage(
headerPanel('Iris k-means clustering'),
sidebarPanel(
selectInput('xcol', 'X Variable', names(iris)),
selectInput('ycol', 'Y Variable', names(iris),
selected = names(iris)[[2]]),
numericInput('clusters', 'Cluster count', 3,
min = 1, max = 9)
),
mainPanel(
plotOutput('plot1')
)
)
server <- function(input, output) {
selectedData <- reactive({
iris[, c(input$xcol, input$ycol)]
})
clusters <- reactive({
kmeans(selectedData(), input$clusters)
})
output$plot1 <- renderPlot({
par(mar = c(5.1, 4.1, 0, 1))
plot(selectedData(),
col = clusters()$cluster,
pch = 20, cex = 3)
points(clusters()$centers, pch = 4, cex = 4, lwd = 4)
})
}
shinyApp(ui = ui, server = server)
rsconnect::setAccountInfo(name='mirloupa',
token='9D3EE1959B0851F09FFC73B0E77D0765',
secret='Oa66HSQo5Us/LUtGn/KJIft9kcB0p0tIti2sI8iK')
library(rsconnect)
setwd("~/")
setwd("~/GDrive_lpmir/PhD/Git_repos/Xf/Effectors/XfShiny")
rsconnect::deployApp("~/GDrive_lpmir/PhD/Git_repos/Xf/Effectors/XfShiny")
rsconnect::deployApp('~/GDrive_lpmir/PhD/Git_repos/Xf/Effectors/XfShiny')
warnings()
knitr::opts_chunk$set(echo = TRUE)
rsconnect::deployApp('~/GDrive_lpmir/PhD/Git_repos/Xf/Effectors/XfShiny')
rsconnect::deployApp('~/GDrive_lpmir/PhD/Git_repos/Xf/Effectors/XfShiny')
devtools::install_github("rstudio/shinyapps")
install.packages("devtools")
library(devtools)
devtools::install_github("rstudio/shinyapps")
devtools::install_github("rstudio/shinyapps")
rsconnect::deployApp('~/GDrive_lpmir/PhD/Git_repos/Xf/Effectors/XfShiny')
ui <- fluidPage(
sliderInput(inputId = "num",    # assigns the name "num" to "inputId" argument
label = "Choose a number",    # assigns the description "Choose a number" to label -> description for user
value = 25, min = 1, max = 100),
plotOutput("hist")
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$num))
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
sliderInput(inputId = "num",    # assigns the name "num" to "inputId" argument
label = "Choose a number",    # assigns the description "Choose a number" to label -> description for user
value = 25, min = 1, max = 100),
plotOutput("hist")
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$num))
})
}
shinyApp(ui = ui, server = server)
library(shinyapps)
devtools::install_github("rstudio/shinyapps")
rsconnect::deployApp('~/GDrive_lpmir/PhD/Git_repos/Xf/Effectors/XfShiny')
